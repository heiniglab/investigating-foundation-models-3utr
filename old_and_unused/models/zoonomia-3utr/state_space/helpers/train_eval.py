import torch

import numpy as np

from collections import defaultdict

from torch import nn

from tqdm import tqdm

from helpers.metrics import MaskedAccuracy

from helpers.misc import EMA

from sklearn.metrics import accuracy_score

from torch.nn.functional import log_softmax, softmax

import re

def model_train(model, optimizer, dataloader, device, silent=False):

    criterion = torch.nn.CrossEntropyLoss(reduction = "mean")

    metric = MaskedAccuracy().to(device)

    model.train() #model to train mode

    if not silent:
        tot_itr = len(dataloader.dataset)
        pbar = tqdm(total = tot_itr, ncols=700) #progress bar

    loss_EMA = EMA()

    masked_acc, total_acc = 0., 0.,

    for itr_idx, ((masked_sequence, species_label), targets_masked, targets, _) in enumerate(dataloader):

        masked_sequence = masked_sequence.to(device)
        species_label = species_label.to(device)
        targets_masked = targets_masked.to(device)
        targets = targets.to(device)

        logits, _ = model(masked_sequence, species_label)

        loss = criterion(logits, targets_masked)

        optimizer.zero_grad()

        loss.backward()

        #if max_abs_grad:
        #    torch.nn.utils.clip_grad_value_(model.parameters(), max_abs_grad)

        optimizer.step()

        smoothed_loss = loss_EMA.update(loss.item())

        preds = torch.argmax(logits, dim=1)

        masked_acc += metric(preds, targets_masked).detach() # compute only on masked nucleotides
        total_acc += metric(preds, targets).detach()

        if not silent:
            pbar.n = chunk_meta['seq_idx'][-1]
            pbar.set_description(f"acc: {total_acc/(itr_idx+1):.2}, masked acc: {masked_acc/(itr_idx+1):.2}, loss: {smoothed_loss:.4}")
            pbar.refresh()

    if not silent:
        del pbar

    return smoothed_loss, total_acc/(itr_idx+1), masked_acc/(itr_idx+1)


def model_eval(model, optimizer, dataloader, device, save_probs = False, temperature=None, silent=False):

    criterion = torch.nn.CrossEntropyLoss(reduction = "mean")

    metric = MaskedAccuracy().to(device)

    model.eval() #model to train mode

    if not silent:
        tot_itr = len(dataloader.dataset)
        pbar = tqdm(total = tot_itr, ncols=700) #progress bar

    avg_loss, masked_acc, total_acc = 0., 0., 0.

    all_seqs, all_probs, all_embeddings, all_losses = defaultdict(str), defaultdict(list), {}, {}

    motif_probas = []

    with torch.no_grad():

        for itr_idx, ((masked_sequence, species_label), targets_masked, targets, chunk_meta) in enumerate(dataloader):

            if save_probs:
                #batches are generated by transformation in the dataset,
                #so remove extra batch dimension added by dataloader
                masked_sequence, targets_masked, targets = masked_sequence[0], targets_masked[0], targets[0]
                species_label = species_label.tile((len(masked_sequence),))

            masked_sequence = masked_sequence.to(device)
            targets_masked = targets_masked.to(device)
            targets = targets.to(device)
            species_label = species_label.long().to(device)

            logits, embeddings = model(masked_sequence, species_label)

            if temperature:
                logits /= temperature

            loss = criterion(logits, targets_masked)

            avg_loss += loss.item()

            preds = torch.argmax(logits, dim=1)

            masked_acc += metric(preds, targets_masked).detach() # compute only on masked nucleotides
            total_acc += metric(preds, targets).detach()

            if  save_probs:

                # only get embeddings of the masked nucleotide
                sequence_embedding = embeddings["seq_embedding"]
                sequence_embedding = sequence_embedding.transpose(-1,-2)[targets_masked!=-100]
                # shape # B, L, dim  to L,dim, left with only masked nucleotide embeddings
                # average over sequence
                #print(sequence_embedding.shape)
                sequence_embedding = sequence_embedding.mean(dim=0) # if we mask
                #sequence_embedding = sequence_embedding[0].mean(dim=-1) # no mask

                sequence_embedding = sequence_embedding.detach().cpu().numpy()

                logits = torch.permute(logits,(2,0,1)).reshape(-1,5).detach()

                targets_masked = targets_masked.T.flatten()

                masked_targets = targets_masked[targets_masked!=-100].cpu()
                logits = logits[targets_masked!=-100].cpu()

                probs = softmax(logits, dim=1).numpy()

                #mapping = {'A':0,'C':1,'G':2,'T':3}
                #ground_truth_logprobs = np.array([logprobs[idx,mapping[base]] for idx,base in enumerate(seq[0])])

                #ground_truth_probs = np.array([probs[idx,base] for idx,base in enumerate(masked_targets)])

                seq_name = chunk_meta['seq_name'][0]
                seq = chunk_meta['seq'][0]
                left_shift = chunk_meta['left_shift'][0]

                all_seqs[seq_name]+=seq[left_shift:]
                all_probs[seq_name].extend(probs[left_shift:])

                if not seq_name in all_embeddings.keys():
                    all_embeddings[seq_name] = sequence_embedding
                    all_losses[seq_name] = loss.item()

            if not silent:
                pbar.n = chunk_meta['seq_idx'][-1]
                pbar.set_description(f"acc: {total_acc/(itr_idx+1):.2}, masked acc: {masked_acc/(itr_idx+1):.2}, loss: {avg_loss/(itr_idx+1):.4}")
                pbar.refresh()

    if not silent:
        del pbar

    all_preds = [(seq_name,all_seqs[seq_name],all_embeddings[seq_name],np.array(all_probs[seq_name]),all_losses[seq_name])
                     for seq_name in all_seqs.keys()]

    return (avg_loss/(itr_idx+1), total_acc/(itr_idx+1), masked_acc/(itr_idx+1)), all_preds, motif_probas
